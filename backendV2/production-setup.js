#!/usr/bin/env node

/**
 * Production Setup Script for BackendV2
 * Configures the backend for production deployment
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üöÄ Setting up BackendV2 for Production...');

// Production environment template
const productionEnv = `# Production Environment Configuration
# Generated by production-setup.js

# JWT Configuration
JWT_SECRET=${process.env.JWT_SECRET || 'your-super-secure-jwt-secret-here'}

# Admin Credentials
ADMIN_EMAIL=${process.env.ADMIN_EMAIL || 'admin@jjtextiles.com'}
ADMIN_PASSWORD=${process.env.ADMIN_PASSWORD || 'your-secure-admin-password'}

# MongoDB Configuration
MONGODB_URI=${process.env.MONGODB_URI || 'mongodb://localhost:27017/jjtex'}

# Cloudinary Configuration
CLOUDINARY_API_KEY=${process.env.CLOUDINARY_API_KEY || 'your-cloudinary-api-key'}
CLOUDINARY_API_SECRET=${process.env.CLOUDINARY_API_SECRET || 'your-cloudinary-api-secret'}
CLOUDINARY_NAME=${process.env.CLOUDINARY_NAME || 'your-cloudinary-name'}

# PhonePe Configuration (PRODUCTION)
PHONEPE_ENV=PRODUCTION
PHONEPE_MERCHANT_ID=${process.env.PHONEPE_MERCHANT_ID || 'your-production-merchant-id'}
PHONEPE_API_KEY=${process.env.PHONEPE_API_KEY || 'your-production-api-key'}
PHONEPE_SALT_INDEX=1
PHONEPE_CLIENT_ID=${process.env.PHONEPE_CLIENT_ID || 'your-production-client-id'}
PHONEPE_CLIENT_SECRET=${process.env.PHONEPE_CLIENT_SECRET || 'your-production-client-secret'}

# Backend URL Configuration
BACKEND_URL=${process.env.BACKEND_URL || 'https://api.jjtextiles.com'}
FRONTEND_URL=${process.env.FRONTEND_URL || 'https://jjtextiles.com'}
VPS_BASE_URL=${process.env.VPS_BASE_URL || 'https://api.jjtextiles.com'}

# Node Environment
NODE_ENV=production
PORT=${process.env.PORT || 4000}

# Redis Configuration (for caching and performance)
REDIS_HOST=${process.env.REDIS_HOST || 'localhost'}
REDIS_PORT=${process.env.REDIS_PORT || '6379'}
REDIS_PASSWORD=${process.env.REDIS_PASSWORD || ''}
REDIS_DB=${process.env.REDIS_DB || '0'}

# Email Configuration (for invoice generation)
SMTP_HOST=${process.env.SMTP_HOST || 'smtp.gmail.com'}
SMTP_PORT=${process.env.SMTP_PORT || '465'}
EMAIL_USER=${process.env.EMAIL_USER || 'your-email@gmail.com'}
EMAIL_PASS=${process.env.EMAIL_PASS || 'your-app-password'}
SMTP_FROM_NAME=JJTEX
SMTP_FROM_EMAIL=${process.env.SMTP_FROM_EMAIL || 'noreply@jjtextiles.com'}
SUPPORT_EMAIL=${process.env.SUPPORT_EMAIL || 'support@jjtextiles.com'}

# Image Optimization
IMAGE_QUALITY=80
IMAGE_MAX_WIDTH=800
IMAGE_MAX_HEIGHT=800
IMAGE_VARIANTS=original,webp
SKIP_IMAGE_OPTIMIZATION=false
IMAGE_COMPRESSION_LEVEL=6

# Hero Images Configuration
MAX_DESKTOP=6
MAX_MOBILE=4
MOBILE_THUMB_SIZE=480
DESKTOP_THUMB_SIZE=800
LQIP_SIZE=20
THUMBNAIL_CACHE_SIZE=100

# Reservation System
RESERVATION_ENABLED=true
RESERVATION_EXPIRY_MINUTES=15
RESERVATION_AUTO_EXPIRY=true

# Cache TTL Settings (in seconds)
REDIS_PRODUCTS_TTL=300
REDIS_CATEGORIES_TTL=3600
REDIS_CART_TTL=3600
REDIS_USER_TTL=86400
REDIS_SESSIONS_TTL=86400
REDIS_STATIC_TTL=7200

# File Upload Configuration
MAX_FILE_SIZE=104857600
UPLOAD_PATH=./uploads

# CORS Configuration
CORS_ORIGIN=https://jjtextiles.com

# Monitoring and Error Tracking
SENTRY_DSN=${process.env.SENTRY_DSN || ''}
FIREBASE_PROJECT_ID=${process.env.FIREBASE_PROJECT_ID || 'jjtex-production'}
GOOGLE_APPLICATION_CREDENTIALS=${process.env.GOOGLE_APPLICATION_CREDENTIALS || ''}

# API Version
API_VERSION=2.0.0
BUILD_TIME=${new Date().toISOString()}

# Production Optimizations
ENABLE_CACHING=true
ENABLE_COMPRESSION=true
ENABLE_RATE_LIMITING=true
ENABLE_SECURITY_HEADERS=true
ENABLE_MONITORING=true
`;

// Create production ecosystem configuration
const ecosystemConfig = `module.exports = {
  apps: [{
    name: 'jjtex-backend-v2',
    script: 'server.js',
    instances: 'max',
    exec_mode: 'cluster',
    env: {
      NODE_ENV: 'production',
      PORT: 4000
    },
    env_production: {
      NODE_ENV: 'production',
      PORT: 4000
    },
    error_file: './logs/err.log',
    out_file: './logs/out.log',
    log_file: './logs/combined.log',
    time: true,
    max_memory_restart: '1G',
    node_args: '--max-old-space-size=1024',
    kill_timeout: 5000,
    wait_ready: true,
    listen_timeout: 10000,
    restart_delay: 4000,
    max_restarts: 10,
    min_uptime: '10s',
    watch: false,
    ignore_watch: ['node_modules', 'logs', 'uploads'],
    watch_options: {
      followSymlinks: false
    }
  }]
};`;

// Create nginx configuration
const nginxConfig = `# Nginx configuration for JJTEX BackendV2
server {
    listen 80;
    server_name api.jjtextiles.com;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name api.jjtextiles.com;

    # SSL Configuration
    ssl_certificate /path/to/your/ssl/certificate.crt;
    ssl_certificate_key /path/to/your/ssl/private.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # Security Headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req zone=api burst=20 nodelay;

    # Proxy Configuration
    location / {
        proxy_pass http://localhost:4000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
        proxy_send_timeout 300s;
    }

    # Static files caching
    location /uploads/ {
        proxy_pass http://localhost:4000;
        expires 1d;
        add_header Cache-Control "public, immutable";
    }

    # Health check
    location /api/health {
        proxy_pass http://localhost:4000;
        access_log off;
    }
}`;

// Create systemd service configuration
const systemdConfig = `[Unit]
Description=JJTEX BackendV2 API Server
After=network.target mongodb.service redis.service

[Service]
Type=forking
User=www-data
WorkingDirectory=/var/www/jjtex-backend-v2
ExecStart=/usr/bin/pm2 start ecosystem.config.js --env production
ExecReload=/usr/bin/pm2 reload ecosystem.config.js
ExecStop=/usr/bin/pm2 stop ecosystem.config.js
Restart=always
RestartSec=10
Environment=NODE_ENV=production
Environment=PORT=4000

[Install]
WantedBy=multi-user.target`;

// Create deployment script
const deployScript = `#!/bin/bash

# JJTEX BackendV2 Deployment Script
echo "üöÄ Deploying JJTEX BackendV2..."

# Stop existing services
echo "‚èπÔ∏è  Stopping existing services..."
pm2 stop jjtex-backend-v2 || true

# Pull latest code
echo "üì• Pulling latest code..."
git pull origin main

# Install dependencies
echo "üì¶ Installing dependencies..."
npm ci --production

# Run database migrations
echo "üóÑÔ∏è  Running database migrations..."
node scripts/migrate-database.js || echo "No migrations to run"

# Start services
echo "‚ñ∂Ô∏è  Starting services..."
pm2 start ecosystem.config.js --env production

# Save PM2 configuration
pm2 save

# Setup PM2 startup
pm2 startup

echo "‚úÖ Deployment completed successfully!"
echo "üîç Check status with: pm2 status"
echo "üìä View logs with: pm2 logs jjtex-backend-v2"
`;

// Create monitoring script
const monitoringScript = `#!/bin/bash

# JJTEX BackendV2 Monitoring Script
echo "üìä JJTEX BackendV2 Health Check..."

# Check if service is running
if pm2 list | grep -q "jjtex-backend-v2.*online"; then
    echo "‚úÖ Service is running"
else
    echo "‚ùå Service is not running"
    exit 1
fi

# Check API health
if curl -f http://localhost:4000/api/health > /dev/null 2>&1; then
    echo "‚úÖ API is responding"
else
    echo "‚ùå API is not responding"
    exit 1
fi

# Check Redis connection
if redis-cli ping > /dev/null 2>&1; then
    echo "‚úÖ Redis is connected"
else
    echo "‚ùå Redis is not connected"
    exit 1
fi

# Check MongoDB connection
if mongo --eval "db.runCommand('ping')" > /dev/null 2>&1; then
    echo "‚úÖ MongoDB is connected"
else
    echo "‚ùå MongoDB is not connected"
    exit 1
fi

echo "üéâ All systems are healthy!"
`;

// Write configuration files
try {
    // Create logs directory
    if (!fs.existsSync(path.join(__dirname, 'logs'))) {
        fs.mkdirSync(path.join(__dirname, 'logs'));
        console.log('‚úÖ Created logs directory');
    }

    // Create uploads directory
    if (!fs.existsSync(path.join(__dirname, 'uploads'))) {
        fs.mkdirSync(path.join(__dirname, 'uploads'));
        console.log('‚úÖ Created uploads directory');
    }

    // Write environment file
    fs.writeFileSync(path.join(__dirname, '.env.production'), productionEnv);
    console.log('‚úÖ Created .env.production');

    // Write ecosystem configuration
    fs.writeFileSync(path.join(__dirname, 'ecosystem.config.js'), ecosystemConfig);
    console.log('‚úÖ Created ecosystem.config.js');

    // Write nginx configuration
    fs.writeFileSync(path.join(__dirname, 'nginx.conf'), nginxConfig);
    console.log('‚úÖ Created nginx.conf');

    // Write systemd service
    fs.writeFileSync(path.join(__dirname, 'jjtex-backend-v2.service'), systemdConfig);
    console.log('‚úÖ Created systemd service file');

    // Write deployment script
    fs.writeFileSync(path.join(__dirname, 'deploy.sh'), deployScript);
    fs.chmodSync(path.join(__dirname, 'deploy.sh'), '755');
    console.log('‚úÖ Created deploy.sh');

    // Write monitoring script
    fs.writeFileSync(path.join(__dirname, 'monitor.sh'), monitoringScript);
    fs.chmodSync(path.join(__dirname, 'monitor.sh'), '755');
    console.log('‚úÖ Created monitor.sh');

    console.log('');
    console.log('üéâ Production setup completed successfully!');
    console.log('');
    console.log('üìã Next steps:');
    console.log('1. Update .env.production with your production credentials');
    console.log('2. Install PM2: npm install -g pm2');
    console.log('3. Install Redis: sudo apt install redis-server');
    console.log('4. Configure nginx with the provided nginx.conf');
    console.log('5. Start the service: pm2 start ecosystem.config.js --env production');
    console.log('6. Setup monitoring: ./monitor.sh');
    console.log('');
    console.log('üîß Configuration files created:');
    console.log('   - .env.production (Environment variables)');
    console.log('   - ecosystem.config.js (PM2 configuration)');
    console.log('   - nginx.conf (Nginx configuration)');
    console.log('   - jjtex-backend-v2.service (Systemd service)');
    console.log('   - deploy.sh (Deployment script)');
    console.log('   - monitor.sh (Monitoring script)');
    console.log('');
    console.log('‚ö†Ô∏è  Remember to:');
    console.log('   - Update SSL certificates in nginx.conf');
    console.log('   - Set up proper firewall rules');
    console.log('   - Configure log rotation');
    console.log('   - Set up automated backups');
    console.log('   - Monitor system resources');

} catch (error) {
    console.error('‚ùå Error during production setup:', error);
    process.exit(1);
}
